package com.soot_test;

import java.util.*;

import soot.*;
import soot.jimple.JimpleBody;
import soot.options.Options;
import soot.toolkits.graph.DirectedGraph;
import soot.util.cfgcmd.AltClassLoader;
import soot.util.cfgcmd.CFGGraphType;
import soot.util.cfgcmd.CFGIntermediateRep;
import soot.util.cfgcmd.CFGToDotGraph;
import soot.util.dot.DotGraph;


public class CFGBuilder extends BodyTransformer {
    private static final String altClassPathOptionName = "alt-class-path";
    private static final String graphTypeOptionName = "graph-type";

    // 设置graph-type的值，该值的选择可以参考Soot API文档：
    // https://soot-build.cs.uni-paderborn.de/public/origin/develop/soot/soot-develop/jdoc/
    private static final String defaultGraph = "CompleteUnitGraph";

    private static final String irOptionName = "ir";
    private static final String defaultIR = "jimple"; // 选择Jimple作为IR
    private static final String multipageOptionName = "multipages";
    private static final String briefLabelOptionName = "brief";

    private CFGGraphType graphtype;
    private CFGIntermediateRep ir;
    private CFGToDotGraph drawer;

    protected void internalTransform(Body b, String phaseName, Map<String, String> options) {
        initialize(options);
        System.out.println(options);
        Body body = ir.getBody((JimpleBody) b);
        //System.out.println(body);
        print_cfg(body);
    }

    public static void main(String[] args) {
        // 设置Soot参数
        List process_dir = new ArrayList();
        process_dir.add(".\\TargetSample"); // 设置目标文件的目录，相当于命令行中的参数-process-dir

        // 设置Soot Classpath的路径，相当于命令行中的参数-cp
        Options.v().set_soot_classpath(".");
        Options.v().set_process_dir(process_dir);

        Options.v().set_prepend_classpath(true); // 将给定的Soot Classpath添加到默认Classpath中，相当于命令行中的参数-pp

        Scene.v().loadNecessaryClasses(); //使用该函数对-process-dir指定的文件夹下的文件一并进行分析

        // 由于这里是以函数为单位进行分析，所以Transformer选在BodyTransformer即可
        CFGBuilder cfgBuilder = new CFGBuilder();
        Transform myTransform = new Transform("jtp.CFGBuilder", cfgBuilder); // 由于是进行过程内分析，所以不选择以w开头的Pack
        myTransform.setDeclaredOptions("enabled " + altClassPathOptionName + ' ' + graphTypeOptionName + ' '
                + irOptionName + ' ' + multipageOptionName + ' ' + briefLabelOptionName + ' ');
        myTransform.setDefaultOptions("enabled " + altClassPathOptionName + ": " + graphTypeOptionName + ':'
                + defaultGraph + ' ' + irOptionName + ':' + defaultIR + ' ' + multipageOptionName + ":false " + ' '
                + briefLabelOptionName + ":false ");
        PackManager.v().getPack("jtp").add(myTransform);

        PackManager.v().runPacks();
    }

    private void initialize(Map<String, String> options) {
        // 对CFG可视化相关的参数进行设置
        // Soot为CFG可视化提供了专门的类：soot.util.cfgcmd
        if (drawer == null) {
            drawer = new CFGToDotGraph(); // 用于创建CFG的可视化DotGraph

            // 指定是否在节点标签中缩写文本；当节点表示基本块时，缩写的节点标签只包含块的数字标签，而未缩写的标签包含其指令的代码
            drawer.setBriefLabels(PhaseOptions.getBoolean(options, briefLabelOptionName));

            drawer.setOnePage(!PhaseOptions.getBoolean(options, multipageOptionName)); // 设置是否将控制流图拆分为多个页面

            // 以下参数仅在画ExceptionalGraphs时有效
            // 指定用于常规控制流边缘的dot graph属性
            drawer.setUnexceptionalControlFlowAttr("color", "black");

            // 指定用于特殊控制流边缘的点图属性
            // 换句话说就是画出程序由于意外导致的执行路径的边
            drawer.setExceptionalControlFlowAttr("color", "red");

            drawer.setExceptionEdgeAttr("color", "lightgray"); // 指定用于描述每个节点可能引发的异常及其处理程序的边的dot graph属性

            // 指定图形是否应该以从抛出节点到处理程序(如果有)的边的形式描述每个节点可能抛出的异常，并标记可能的异常类型
            drawer.setShowExceptions(Options.v().show_exception_dests());

            ir = CFGIntermediateRep.getIR(PhaseOptions.getString(options, irOptionName));
            graphtype = CFGGraphType.getGraphType(PhaseOptions.getString(options, graphTypeOptionName));

            // AltClassLoader是一个类加载器，它从不同于System.getProperties()中java.class.path值给出的类路径加载指定的类
            AltClassLoader.v().setAltClassPath(PhaseOptions.getString(options, altClassPathOptionName));
            AltClassLoader.v().setAltClasses(
                    new String[] { "soot.toolkits.graph.ArrayRefBlockGraph", "soot.toolkits.graph.Block",
                            "soot.toolkits.graph.Block$AllMapTo", "soot.toolkits.graph.BlockGraph",
                            "soot.toolkits.graph.BriefBlockGraph", "soot.toolkits.graph.BriefUnitGraph",
                            "soot.toolkits.graph.CompleteBlockGraph", "soot.toolkits.graph.CompleteUnitGraph",
                            "soot.toolkits.graph.TrapUnitGraph", "soot.toolkits.graph.UnitGraph",
                            "soot.toolkits.graph.ZonedBlockGraph"});
        }
    }

    protected void print_cfg(Body body) {
        // DirectedGraph是有向图的接口，是一个迭代器
        DirectedGraph<Unit> graph = (DirectedGraph<Unit>) graphtype.buildGraph(body); // 构建由graphType指定的特定类型的CFG

        DotGraph canvas = graphtype.drawGraph(drawer, graph, body);

        String methodname = body.getMethod().getSubSignature(); // 获取函数签名
        String classname = body.getMethod().getDeclaringClass().getName().replaceAll("\\$", "\\.");
        String filename = soot.SourceLocator.v().getOutputDir();
        if (filename.length() > 0) {
            filename = filename + java.io.File.separator;
        }
        filename = filename + classname + " " + methodname.replace(java.io.File.separatorChar, '.') + DotGraph.DOT_EXTENSION;

        // G是soot package下的一个类，用于将所有全局变量组合在一起
        // G.v().out.println("Generate dot file in " + filename); // 以slf4j的方式记录日志，不推荐
        canvas.plot(filename);
    }
}
